{"version":3,"file":"torusUtils.cjs.js","mappings":"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","sources":["webpack://@toruslabs/torus.js/webpack/bootstrap","webpack://@toruslabs/torus.js/webpack/runtime/compat get default export","webpack://@toruslabs/torus.js/webpack/runtime/define property getters","webpack://@toruslabs/torus.js/webpack/runtime/hasOwnProperty shorthand","webpack://@toruslabs/torus.js/webpack/runtime/make namespace object","webpack://@toruslabs/torus.js/external commonjs2 \"@babel/runtime/helpers/typeof\"","webpack://@toruslabs/torus.js/external commonjs2 \"@babel/runtime/helpers/asyncToGenerator\"","webpack://@toruslabs/torus.js/external commonjs2 \"@babel/runtime/helpers/classCallCheck\"","webpack://@toruslabs/torus.js/external commonjs2 \"@babel/runtime/helpers/createClass\"","webpack://@toruslabs/torus.js/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@toruslabs/torus.js/external commonjs2 \"@babel/runtime/regenerator\"","webpack://@toruslabs/torus.js/external commonjs2 \"@toruslabs/eccrypto\"","webpack://@toruslabs/torus.js/external commonjs2 \"@toruslabs/http-helpers\"","webpack://@toruslabs/torus.js/external commonjs2 \"bn.js\"","webpack://@toruslabs/torus.js/external commonjs2 \"elliptic\"","webpack://@toruslabs/torus.js/external commonjs2 \"json-stable-stringify\"","webpack://@toruslabs/torus.js/external commonjs2 \"web3-utils\"","webpack://@toruslabs/torus.js/external commonjs2 \"loglevel\"","webpack://@toruslabs/torus.js/./src/loglevel.ts","webpack://@toruslabs/torus.js/external commonjs2 \"@babel/runtime/helpers/assertThisInitialized\"","webpack://@toruslabs/torus.js/external commonjs2 \"@babel/runtime/helpers/inherits\"","webpack://@toruslabs/torus.js/external commonjs2 \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack://@toruslabs/torus.js/external commonjs2 \"@babel/runtime/helpers/getPrototypeOf\"","webpack://@toruslabs/torus.js/external commonjs2 \"@babel/runtime/helpers/wrapNativeSuper\"","webpack://@toruslabs/torus.js/./src/some.ts","webpack://@toruslabs/torus.js/external commonjs2 \"@babel/runtime/helpers/toConsumableArray\"","webpack://@toruslabs/torus.js/external commonjs2 \"keccak\"","webpack://@toruslabs/torus.js/./src/utils.ts","webpack://@toruslabs/torus.js/./src/torus.ts","webpack://@toruslabs/torus.js/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/typeof\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/asyncToGenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/classCallCheck\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/createClass\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/regenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/eccrypto\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/http-helpers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bn.js\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"elliptic\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"json-stable-stringify\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"web3-utils\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"loglevel\");","import loglevel from \"loglevel\";\n\nconst log = loglevel.getLogger(\"torus.js\");\nlog.disableAll();\n\nexport default log;\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/assertThisInitialized\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/inherits\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/getPrototypeOf\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/wrapNativeSuper\");","function capitalizeFirstLetter(str: string): string {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport class SomeError<T> extends Error {\n  errors: Error[];\n\n  responses: T[];\n\n  predicate: string;\n\n  constructor({ errors, responses, predicate }: { errors: Error[]; responses: T[]; predicate: string }) {\n    super(\"Unable to resolve enough promises.\");\n    this.errors = errors;\n    this.responses = responses;\n    this.predicate = predicate;\n  }\n}\n\nexport const Some = <K, T>(promises: Promise<K>[], predicate: (resultArr: K[], { resolved }: { resolved: boolean }) => Promise<T>): Promise<T> =>\n  new Promise((resolve, reject) => {\n    let finishedCount = 0;\n    const sharedState = { resolved: false };\n    const errorArr: Error[] = new Array(promises.length).fill(undefined);\n    const resultArr: K[] = new Array(promises.length).fill(undefined);\n    let predicateError: Error | string;\n    return promises.forEach((x, index) => {\n      return (\n        x\n          .then((resp: K) => {\n            resultArr[index] = resp;\n            return undefined;\n          })\n          .catch((error: Error) => {\n            errorArr[index] = error;\n          })\n          // eslint-disable-next-line promise/no-return-in-finally\n          .finally(() => {\n            if (sharedState.resolved) return;\n            return predicate(resultArr.slice(0), sharedState)\n              .then((data) => {\n                sharedState.resolved = true;\n                resolve(data);\n                return undefined;\n              })\n              .catch((error) => {\n                // log only the last predicate error\n                predicateError = error;\n              })\n              .finally(() => {\n                finishedCount += 1;\n                if (finishedCount === promises.length) {\n                  const errors = Object.values(\n                    resultArr.reduce((acc: Record<string, string>, z) => {\n                      if (z) {\n                        const { id, error } = z as { id?: string; error?: { data?: string } };\n                        if (error?.data?.length > 0) {\n                          if (error.data.startsWith(\"Error occurred while verifying params\")) acc[id] = capitalizeFirstLetter(error.data);\n                          else acc[id] = error.data;\n                        }\n                      }\n                      return acc;\n                    }, {})\n                  );\n\n                  if (errors.length > 0) {\n                    // Format-able errors\n                    const msg = errors.length > 1 ? `\\n${errors.map((it) => `• ${it}`).join(\"\\n\")}` : errors[0];\n                    reject(new Error(msg));\n                  } else {\n                    reject(\n                      new SomeError({\n                        errors: errorArr,\n                        responses: resultArr,\n                        predicate: (predicateError as Error)?.message || (predicateError as string),\n                      })\n                    );\n                  }\n                }\n              });\n          })\n      );\n    });\n  });\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/toConsumableArray\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"keccak\");","import { generateJsonRPCObject, post } from \"@toruslabs/http-helpers\";\nimport JsonStringify from \"json-stable-stringify\";\nimport createKeccakHash from \"keccak\";\n\nimport { JRPCResponse, KeyAssignInput, KeyLookupResult, SignerResponse, VerifierLookupResponse } from \"./interfaces\";\nimport log from \"./loglevel\";\nimport { Some } from \"./some\";\n\nexport class GetOrSetNonceError extends Error {}\n\nexport const kCombinations = (s: number | number[], k: number): number[][] => {\n  let set = s;\n  if (typeof set === \"number\") {\n    set = Array.from({ length: set }, (_, i) => i);\n  }\n  if (k > set.length || k <= 0) {\n    return [];\n  }\n\n  if (k === set.length) {\n    return [set];\n  }\n\n  if (k === 1) {\n    return set.reduce((acc, cur) => [...acc, [cur]], [] as number[][]);\n  }\n\n  const combs: number[][] = [];\n  let tailCombs: number[][] = [];\n\n  for (let i = 0; i <= set.length - k + 1; i += 1) {\n    tailCombs = kCombinations(set.slice(i + 1), k - 1);\n    for (let j = 0; j < tailCombs.length; j += 1) {\n      combs.push([set[i], ...tailCombs[j]]);\n    }\n  }\n\n  return combs;\n};\n\nexport const thresholdSame = <T>(arr: T[], t: number): T | undefined => {\n  const hashMap: Record<string, number> = {};\n  for (let i = 0; i < arr.length; i += 1) {\n    const str = JsonStringify(arr[i]);\n    hashMap[str] = hashMap[str] ? hashMap[str] + 1 : 1;\n    if (hashMap[str] === t) {\n      return arr[i];\n    }\n  }\n  return undefined;\n};\n\nexport const keyLookup = async (endpoints: string[], verifier: string, verifierId: string): Promise<KeyLookupResult> => {\n  const lookupPromises = endpoints.map((x) =>\n    post<JRPCResponse<VerifierLookupResponse>>(\n      x,\n      generateJsonRPCObject(\"VerifierLookupRequest\", {\n        verifier,\n        verifier_id: verifierId.toString(),\n      })\n    ).catch((err) => log.error(\"lookup request failed\", err))\n  );\n  return Some<void | JRPCResponse<VerifierLookupResponse>, KeyLookupResult>(lookupPromises, (lookupResults) => {\n    const lookupShares = lookupResults.filter((x1) => x1);\n    const errorResult = thresholdSame(\n      lookupShares.map((x2) => x2 && x2.error),\n      ~~(endpoints.length / 2) + 1\n    );\n    const keyResult = thresholdSame(\n      lookupShares.map((x3) => x3 && x3.result),\n      ~~(endpoints.length / 2) + 1\n    );\n    if (keyResult || errorResult) {\n      return Promise.resolve({ keyResult, errorResult });\n    }\n    return Promise.reject(new Error(`invalid results ${JSON.stringify(lookupResults)}`));\n  });\n};\n\nexport const waitKeyLookup = (endpoints: string[], verifier: string, verifierId: string, timeout: number): Promise<KeyLookupResult> =>\n  new Promise((resolve, reject) => {\n    setTimeout(() => {\n      keyLookup(endpoints, verifier, verifierId).then(resolve).catch(reject);\n    }, timeout);\n  });\n\nexport const keyAssign = async ({\n  endpoints,\n  torusNodePubs,\n  lastPoint,\n  firstPoint,\n  verifier,\n  verifierId,\n  signerHost,\n  network,\n}: KeyAssignInput): Promise<void> => {\n  let nodeNum: number;\n  let initialPoint: number | undefined;\n  if (lastPoint === undefined) {\n    nodeNum = Math.floor(Math.random() * endpoints.length);\n    initialPoint = nodeNum;\n  } else {\n    nodeNum = lastPoint % endpoints.length;\n  }\n  if (nodeNum === firstPoint) throw new Error(\"Looped through all\");\n  if (firstPoint !== undefined) initialPoint = firstPoint;\n\n  const data = generateJsonRPCObject(\"KeyAssign\", {\n    verifier,\n    verifier_id: verifierId.toString(),\n  });\n  try {\n    const signedData = await post<SignerResponse>(\n      signerHost,\n      data,\n      {\n        headers: {\n          pubKeyX: torusNodePubs[nodeNum].X,\n          pubKeyY: torusNodePubs[nodeNum].Y,\n          network,\n        },\n      },\n      { useAPIKey: true }\n    );\n    return await post<void>(\n      endpoints[nodeNum],\n      { ...data, ...signedData },\n      {\n        headers: {\n          \"Content-Type\": \"application/json; charset=utf-8\",\n        },\n      }\n    );\n  } catch (error) {\n    log.error(error);\n    const acceptedErrorMsgs = [\n      // Slow node\n      \"Timed out\",\n      // Happens when the node is not reachable (dns issue etc)\n      \"TypeError: Failed to fetch\", // All except iOS and Firefox\n      \"TypeError: cancelled\", // iOS\n      \"TypeError: NetworkError when attempting to fetch resource.\", // Firefox\n    ];\n    if (acceptedErrorMsgs.includes(error.message))\n      return keyAssign({ endpoints, torusNodePubs, lastPoint: nodeNum + 1, firstPoint: initialPoint, verifier, verifierId, signerHost, network });\n    throw new Error(\n      `Sorry, the Torus Network that powers Web3Auth is currently very busy.\n    We will generate your key in time. Pls try again later. \\n\n    ${error.message || \"\"}`\n    );\n  }\n};\n\nexport function keccak256(a: string | Buffer): string {\n  const hash = createKeccakHash(\"keccak256\").update(a).digest().toString(\"hex\");\n  return `0x${hash}`;\n}\n","import { decrypt, generatePrivate, getPublic } from \"@toruslabs/eccrypto\";\nimport type { INodePub } from \"@toruslabs/fetch-node-details\";\nimport { Data, generateJsonRPCObject, get, post, setAPIKey, setEmbedHost } from \"@toruslabs/http-helpers\";\nimport BN from \"bn.js\";\nimport { curve, ec as EC } from \"elliptic\";\nimport stringify from \"json-stable-stringify\";\nimport { toChecksumAddress } from \"web3-utils\";\n\nimport {\n  CommitmentRequestResult,\n  GetOrSetNonceResult,\n  JRPCResponse,\n  MetadataParams,\n  RetrieveSharesResponse,\n  SetCustomKeyOptions,\n  ShareRequestResult,\n  TorusCtorOptions,\n  V1UserTypeAndAddress,\n  V2UserTypeAndAddress,\n  VerifierLookupResponse,\n  VerifierParams,\n} from \"./interfaces\";\nimport log from \"./loglevel\";\nimport { Some } from \"./some\";\nimport { GetOrSetNonceError, kCombinations, keccak256, keyAssign, keyLookup, thresholdSame, waitKeyLookup } from \"./utils\";\n\n// Implement threshold logic wrappers around public APIs\n// of Torus nodes to handle malicious node responses\nclass Torus {\n  public metadataHost: string;\n\n  public allowHost: string;\n\n  public serverTimeOffset: number;\n\n  public enableOneKey: boolean;\n\n  public signerHost: string;\n\n  public network: string;\n\n  protected ec: EC;\n\n  constructor({\n    enableOneKey = false,\n    metadataHost = \"https://metadata.tor.us\",\n    allowHost = \"https://signer.tor.us/api/allow\",\n    signerHost = \"https://signer.tor.us/api/sign\",\n    serverTimeOffset = 0,\n    network = \"mainnet\",\n  }: TorusCtorOptions = {}) {\n    this.ec = new EC(\"secp256k1\");\n    this.metadataHost = metadataHost;\n    this.allowHost = allowHost;\n    this.enableOneKey = enableOneKey;\n    this.serverTimeOffset = serverTimeOffset || 0; // ms\n    this.signerHost = signerHost;\n    this.network = network;\n  }\n\n  static enableLogging(v = true): void {\n    if (v) log.enableAll();\n    else log.disableAll();\n  }\n\n  static setAPIKey(apiKey: string): void {\n    setAPIKey(apiKey);\n  }\n\n  static setEmbedHost(embedHost: string): void {\n    setEmbedHost(embedHost);\n  }\n\n  static isGetOrSetNonceError(err: unknown): boolean {\n    return err instanceof GetOrSetNonceError;\n  }\n\n  /**\n   * Note: use this function only for openlogin tkey account lookups.\n   */\n  async getUserTypeAndAddress(\n    endpoints: string[],\n    torusNodePubs: INodePub[],\n    { verifier, verifierId }: { verifier: string; verifierId: string },\n    doesKeyAssign = false\n  ): Promise<V1UserTypeAndAddress | V2UserTypeAndAddress> {\n    const { keyResult, errorResult } = (await keyLookup(endpoints, verifier, verifierId)) || {};\n    let isNewKey = false;\n    let finalKeyResult: VerifierLookupResponse;\n    if (errorResult && JSON.stringify(errorResult).includes(\"Verifier + VerifierID has not yet been assigned\")) {\n      if (!doesKeyAssign) {\n        throw new Error(\"Verifier + VerifierID has not yet been assigned\");\n      }\n      await keyAssign({\n        endpoints,\n        torusNodePubs,\n        lastPoint: undefined,\n        firstPoint: undefined,\n        verifier,\n        verifierId,\n        signerHost: this.signerHost,\n        network: this.network,\n      });\n      const assignResult = await waitKeyLookup(endpoints, verifier, verifierId, 1000);\n      finalKeyResult = assignResult?.keyResult;\n      isNewKey = true;\n    } else if (keyResult) {\n      finalKeyResult = keyResult;\n    } else {\n      throw new Error(`node results do not match at first lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n    }\n    if (finalKeyResult) {\n      const { pub_key_X: X, pub_key_Y: Y } = finalKeyResult.keys[0];\n      let nonceResult: GetOrSetNonceResult;\n      let nonce: BN;\n      let modifiedPubKey: curve.base.BasePoint;\n\n      try {\n        nonceResult = await this.getOrSetNonce(X, Y, undefined, !isNewKey);\n        nonce = new BN(nonceResult.nonce || \"0\", 16);\n      } catch {\n        throw new GetOrSetNonceError();\n      }\n      if (nonceResult.typeOfUser === \"v1\") {\n        modifiedPubKey = this.ec\n          .keyFromPublic({ x: X, y: Y })\n          .getPublic()\n          .add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic());\n      } else if (nonceResult.typeOfUser === \"v2\") {\n        modifiedPubKey = this.ec\n          .keyFromPublic({ x: X, y: Y })\n          .getPublic()\n          .add(this.ec.keyFromPublic({ x: nonceResult.pubNonce.x, y: nonceResult.pubNonce.y }).getPublic());\n      } else {\n        throw new Error(\"getOrSetNonce should always return typeOfUser.\");\n      }\n      const finalX = modifiedPubKey.getX().toString(16);\n      const finalY = modifiedPubKey.getY().toString(16);\n      const address = this.generateAddressFromPubKey(modifiedPubKey.getX(), modifiedPubKey.getY());\n      if (nonceResult.typeOfUser === \"v1\") return { typeOfUser: nonceResult.typeOfUser, nonce, X: finalX, Y: finalY, address };\n      else if (nonceResult.typeOfUser === \"v2\") {\n        return {\n          typeOfUser: nonceResult.typeOfUser,\n          nonce,\n          pubNonce: nonceResult.pubNonce,\n          upgraded: nonceResult.upgraded,\n          X: finalX,\n          Y: finalY,\n          address,\n        };\n      }\n    }\n    throw new Error(`node results do not match at final lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n  }\n\n  async setCustomKey({ privKeyHex, metadataNonce, torusKeyHex, customKeyHex }: SetCustomKeyOptions): Promise<void> {\n    let torusKey: BN;\n    if (torusKeyHex) {\n      torusKey = new BN(torusKeyHex, 16);\n    } else {\n      const privKey = new BN(privKeyHex as string, 16);\n      torusKey = privKey.sub(metadataNonce as BN).umod(this.ec.curve.n);\n    }\n    const customKey = new BN(customKeyHex, 16);\n    const newMetadataNonce = customKey.sub(torusKey).umod(this.ec.curve.n);\n    const data = this.generateMetadataParams(newMetadataNonce.toString(16), torusKey);\n    await this.setMetadata(data);\n  }\n\n  async retrieveShares(\n    endpoints: string[],\n    indexes: number[],\n    verifier: string,\n    verifierParams: VerifierParams,\n    idToken: string,\n    extraParams: Record<string, unknown> = {}\n  ): Promise<RetrieveSharesResponse> {\n    const promiseArr = [];\n    await get<void>(\n      this.allowHost,\n      {\n        headers: {\n          verifier,\n          verifier_id: verifierParams.verifier_id,\n          network: this.network,\n        },\n      },\n      { useAPIKey: true }\n    );\n    /*\n      CommitmentRequestParams struct {\n        MessagePrefix      string `json:\"messageprefix\"`\n        TokenCommitment    string `json:\"tokencommitment\"`\n        TempPubX           string `json:\"temppubx\"`\n        TempPubY           string `json:\"temppuby\"`\n        VerifierIdentifier string `json:\"verifieridentifier\"`\n      } \n      */\n\n    // generate temporary private and public key that is used to secure receive shares\n    const tmpKey = generatePrivate();\n    const pubKey = getPublic(tmpKey).toString(\"hex\");\n    const pubKeyX = pubKey.slice(2, 66);\n    const pubKeyY = pubKey.slice(66);\n    const tokenCommitment = keccak256(idToken);\n\n    // make commitment requests to endpoints\n    for (let i = 0; i < endpoints.length; i += 1) {\n      const p = post<JRPCResponse<CommitmentRequestResult>>(\n        endpoints[i],\n        generateJsonRPCObject(\"CommitmentRequest\", {\n          messageprefix: \"mug00\",\n          tokencommitment: tokenCommitment.slice(2),\n          temppubx: pubKeyX,\n          temppuby: pubKeyY,\n          verifieridentifier: verifier,\n        })\n      ).catch((err) => {\n        log.error(\"commitment\", err);\n      });\n      promiseArr.push(p);\n    }\n    /*\n      ShareRequestParams struct {\n        Item []bijson.RawMessage `json:\"item\"`\n      }\n      ShareRequestItem struct {\n        IDToken            string          `json:\"idtoken\"`\n        NodeSignatures     []NodeSignature `json:\"nodesignatures\"`\n        VerifierIdentifier string          `json:\"verifieridentifier\"`\n      }\n      NodeSignature struct {\n        Signature   string\n        Data        string\n        NodePubKeyX string\n        NodePubKeyY string\n      }\n      CommitmentRequestResult struct {\n        Signature string `json:\"signature\"`\n        Data      string `json:\"data\"`\n        NodePubX  string `json:\"nodepubx\"`\n        NodePubY  string `json:\"nodepuby\"`\n      }\n      */\n    // send share request once k + t number of commitment requests have completed\n    return Some<void | JRPCResponse<CommitmentRequestResult>, (void | JRPCResponse<CommitmentRequestResult>)[]>(promiseArr, (resultArr) => {\n      const completedRequests = resultArr.filter((x) => {\n        if (!x || typeof x !== \"object\") {\n          return false;\n        }\n        if (x.error) {\n          return false;\n        }\n        return true;\n      });\n      if (completedRequests.length >= ~~(endpoints.length / 4) * 3 + 1) {\n        return Promise.resolve(resultArr);\n      }\n      return Promise.reject(new Error(`invalid ${JSON.stringify(resultArr)}`));\n    })\n      .then((responses) => {\n        const promiseArrRequest: Promise<void | JRPCResponse<ShareRequestResult>>[] = [];\n        const nodeSigs = [];\n        for (let i = 0; i < responses.length; i += 1) {\n          if (responses[i]) nodeSigs.push((responses[i] as JRPCResponse<CommitmentRequestResult>).result);\n        }\n        for (let i = 0; i < endpoints.length; i += 1) {\n          // eslint-disable-next-line promise/no-nesting\n          const p = post<JRPCResponse<ShareRequestResult>>(\n            endpoints[i],\n            generateJsonRPCObject(\"ShareRequest\", {\n              encrypted: \"yes\",\n              item: [{ ...verifierParams, idtoken: idToken, nodesignatures: nodeSigs, verifieridentifier: verifier, ...extraParams }],\n            })\n          ).catch((err) => log.error(\"share req\", err));\n          promiseArrRequest.push(p);\n        }\n        return Some<void | JRPCResponse<ShareRequestResult>, BN | undefined>(promiseArrRequest, async (shareResponses, sharedState) => {\n          /*\n              ShareRequestResult struct {\n                Keys []KeyAssignment\n              }\n                      / KeyAssignmentPublic -\n              type KeyAssignmentPublic struct {\n                Index     big.Int\n                PublicKey common.Point\n                Threshold int\n                Verifiers map[string][]string // Verifier => VerifierID\n              }\n\n              // KeyAssignment -\n              type KeyAssignment struct {\n                KeyAssignmentPublic\n                Share big.Int // Or Si\n              }\n            */\n          // check if threshold number of nodes have returned the same user public key\n          const completedRequests = shareResponses.filter((x) => x);\n          const thresholdPublicKey = thresholdSame(\n            shareResponses.map((x) => x && x.result && x.result.keys[0].PublicKey),\n            ~~(endpoints.length / 2) + 1\n          );\n          // optimistically run lagrange interpolation once threshold number of shares have been received\n          // this is matched against the user public key to ensure that shares are consistent\n          if (completedRequests.length >= ~~(endpoints.length / 2) + 1 && thresholdPublicKey) {\n            const sharePromises: Promise<void | Buffer>[] = [];\n            const nodeIndexes: BN[] = [];\n            for (let i = 0; i < shareResponses.length; i += 1) {\n              const currentShareResponse = shareResponses[i] as JRPCResponse<ShareRequestResult>;\n              if (currentShareResponse?.result?.keys?.length > 0) {\n                currentShareResponse.result.keys.sort((a, b) => new BN(a.Index, 16).cmp(new BN(b.Index, 16)));\n                const firstKey = currentShareResponse.result.keys[0];\n                if (firstKey.Metadata) {\n                  const metadata = {\n                    ephemPublicKey: Buffer.from(firstKey.Metadata.ephemPublicKey, \"hex\"),\n                    iv: Buffer.from(firstKey.Metadata.iv, \"hex\"),\n                    mac: Buffer.from(firstKey.Metadata.mac, \"hex\"),\n                    // mode: Buffer.from(firstKey.Metadata.mode, \"hex\"),\n                  };\n                  sharePromises.push(\n                    // eslint-disable-next-line promise/no-nesting\n                    decrypt(tmpKey, {\n                      ...metadata,\n                      ciphertext: Buffer.from(Buffer.from(firstKey.Share, \"base64\").toString(\"binary\").padStart(64, \"0\"), \"hex\"),\n                    }).catch((err) => log.debug(\"share decryption\", err))\n                  );\n                } else {\n                  sharePromises.push(Promise.resolve(Buffer.from(firstKey.Share.padStart(64, \"0\"), \"hex\")));\n                }\n              } else {\n                sharePromises.push(Promise.resolve(undefined));\n              }\n              nodeIndexes.push(new BN(indexes[i], 16));\n            }\n            const sharesResolved = await Promise.all(sharePromises);\n            if (sharedState.resolved) return undefined;\n\n            const decryptedShares = sharesResolved.reduce((acc, curr, index) => {\n              if (curr) acc.push({ index: nodeIndexes[index], value: new BN(curr) });\n              return acc;\n            }, [] as { index: BN; value: BN }[]);\n            // run lagrange interpolation on all subsets, faster in the optimistic scenario than berlekamp-welch due to early exit\n            const allCombis = kCombinations(decryptedShares.length, ~~(endpoints.length / 2) + 1);\n            let privateKey: BN | null = null;\n            for (let j = 0; j < allCombis.length; j += 1) {\n              const currentCombi = allCombis[j];\n              const currentCombiShares = decryptedShares.filter((v, index) => currentCombi.includes(index));\n              const shares = currentCombiShares.map((x) => x.value);\n              const indices = currentCombiShares.map((x) => x.index);\n              const derivedPrivateKey = this.lagrangeInterpolation(shares, indices);\n              if (!derivedPrivateKey) continue;\n              const decryptedPubKey = getPublic(Buffer.from(derivedPrivateKey.toString(16, 64), \"hex\")).toString(\"hex\");\n              const decryptedPubKeyX = decryptedPubKey.slice(2, 66);\n              const decryptedPubKeyY = decryptedPubKey.slice(66);\n              if (\n                new BN(decryptedPubKeyX, 16).cmp(new BN(thresholdPublicKey.X, 16)) === 0 &&\n                new BN(decryptedPubKeyY, 16).cmp(new BN(thresholdPublicKey.Y, 16)) === 0\n              ) {\n                privateKey = derivedPrivateKey;\n                break;\n              }\n            }\n            if (privateKey === undefined || privateKey === null) {\n              throw new Error(\"could not derive private key\");\n            }\n            return privateKey;\n          }\n          throw new Error(\"invalid\");\n        });\n      })\n      .then(async (returnedKey) => {\n        let privateKey = returnedKey;\n        if (!privateKey) throw new Error(\"Invalid private key returned\");\n        const decryptedPubKey = getPublic(Buffer.from(privateKey.toString(16, 64), \"hex\")).toString(\"hex\");\n        const decryptedPubKeyX = decryptedPubKey.slice(2, 66);\n        const decryptedPubKeyY = decryptedPubKey.slice(66);\n        let metadataNonce: BN;\n        if (this.enableOneKey) {\n          const { nonce } = await this.getNonce(decryptedPubKeyX, decryptedPubKeyY, privateKey);\n          metadataNonce = new BN(nonce || \"0\", 16);\n        } else {\n          metadataNonce = await this.getMetadata({ pub_key_X: decryptedPubKeyX, pub_key_Y: decryptedPubKeyY });\n        }\n        log.debug(\"> torus.js/retrieveShares\", { privKey: privateKey.toString(16), metadataNonce: metadataNonce.toString(16) });\n\n        privateKey = privateKey.add(metadataNonce).umod(this.ec.curve.n);\n\n        const ethAddress = this.generateAddressFromPrivKey(privateKey);\n        log.debug(\"> torus.js/retrieveShares\", { ethAddress, privKey: privateKey.toString(16) });\n\n        // return reconstructed private key and ethereum address\n        return {\n          ethAddress,\n          privKey: privateKey.toString(\"hex\", 64),\n          metadataNonce,\n        };\n      });\n  }\n\n  async getMetadata(data: Omit<MetadataParams, \"set_data\" | \"signature\">, options: RequestInit = {}): Promise<BN> {\n    try {\n      const metadataResponse = await post<{ message?: string }>(`${this.metadataHost}/get`, data, options, { useAPIKey: true });\n      if (!metadataResponse || !metadataResponse.message) {\n        return new BN(0);\n      }\n      return new BN(metadataResponse.message, 16); // nonce\n    } catch (error) {\n      log.error(\"get metadata error\", error);\n      return new BN(0);\n    }\n  }\n\n  generateMetadataParams(message: string, privateKey: BN): MetadataParams {\n    const key = this.ec.keyFromPrivate(privateKey.toString(\"hex\", 64));\n    const setData = {\n      data: message,\n      timestamp: new BN(~~(this.serverTimeOffset + Date.now() / 1000)).toString(16),\n    };\n    const sig = key.sign(keccak256(stringify(setData)).slice(2));\n    return {\n      pub_key_X: key.getPublic().getX().toString(\"hex\"),\n      pub_key_Y: key.getPublic().getY().toString(\"hex\"),\n      set_data: setData,\n      signature: Buffer.from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + new BN(\"\").toString(16, 2), \"hex\").toString(\"base64\"),\n    };\n  }\n\n  async setMetadata(data: MetadataParams, options: RequestInit = {}): Promise<string> {\n    try {\n      const metadataResponse = await post<{ message: string }>(`${this.metadataHost}/set`, data, options, { useAPIKey: true });\n      return metadataResponse.message; // IPFS hash\n    } catch (error) {\n      log.error(\"set metadata error\", error);\n      return \"\";\n    }\n  }\n\n  lagrangeInterpolation(shares: BN[], nodeIndex: BN[]): BN | null {\n    if (shares.length !== nodeIndex.length) {\n      return null;\n    }\n    let secret = new BN(0);\n    for (let i = 0; i < shares.length; i += 1) {\n      let upper = new BN(1);\n      let lower = new BN(1);\n      for (let j = 0; j < shares.length; j += 1) {\n        if (i !== j) {\n          upper = upper.mul(nodeIndex[j].neg());\n          upper = upper.umod(this.ec.curve.n);\n          let temp = nodeIndex[i].sub(nodeIndex[j]);\n          temp = temp.umod(this.ec.curve.n);\n          lower = lower.mul(temp).umod(this.ec.curve.n);\n        }\n      }\n      let delta = upper.mul(lower.invm(this.ec.curve.n)).umod(this.ec.curve.n);\n      delta = delta.mul(shares[i]).umod(this.ec.curve.n);\n      secret = secret.add(delta);\n    }\n    return secret.umod(this.ec.curve.n);\n  }\n\n  generateAddressFromPrivKey(privateKey: BN): string {\n    const key = this.ec.keyFromPrivate(privateKey.toString(\"hex\", 64), \"hex\");\n    const publicKey = key.getPublic().encode(\"hex\", false).slice(2);\n    log.info(publicKey, \"public key\");\n    const ethAddressLower = `0x${keccak256(Buffer.from(publicKey, \"hex\")).slice(64 - 38)}`;\n    return toChecksumAddress(ethAddressLower);\n  }\n\n  generateAddressFromPubKey(publicKeyX: BN, publicKeyY: BN): string {\n    const key = this.ec.keyFromPublic({ x: publicKeyX.toString(\"hex\", 64), y: publicKeyY.toString(\"hex\", 64) });\n    const publicKey = key.getPublic().encode(\"hex\", false).slice(2);\n    log.info(key.getPublic().encode(\"hex\", false), \"public key\");\n    const ethAddressLower = `0x${keccak256(Buffer.from(publicKey, \"hex\")).slice(64 - 38)}`;\n    return toChecksumAddress(ethAddressLower);\n  }\n\n  /**\n   * Note: use this function only with custom auth, don't use to lookup openlogin accounts.\n   */\n  async getPublicAddress(\n    endpoints: string[],\n    torusNodePubs: INodePub[],\n    { verifier, verifierId }: { verifier: string; verifierId: string },\n    isExtended = false\n  ) {\n    log.debug(\"> torus.js/getPublicAddress\", { endpoints, torusNodePubs, verifier, verifierId, isExtended });\n\n    let finalKeyResult: VerifierLookupResponse | undefined;\n    let isNewKey = false;\n\n    const { keyResult, errorResult } = (await keyLookup(endpoints, verifier, verifierId)) || {};\n    if (errorResult && JSON.stringify(errorResult).includes(\"Verifier not supported\")) {\n      // change error msg\n      throw new Error(`Verifier not supported. Check if you: \\n\n      1. Are on the right network (Torus testnet/mainnet) \\n\n      2. Have setup a verifier on dashboard.web3auth.io?`);\n    } else if (errorResult && JSON.stringify(errorResult).includes(\"Verifier + VerifierID has not yet been assigned\")) {\n      await keyAssign({\n        endpoints,\n        torusNodePubs,\n        lastPoint: undefined,\n        firstPoint: undefined,\n        verifier,\n        verifierId,\n        signerHost: this.signerHost,\n        network: this.network,\n      });\n      const assignResult = await waitKeyLookup(endpoints, verifier, verifierId, 1000);\n      finalKeyResult = assignResult?.keyResult;\n      isNewKey = true;\n    } else if (keyResult) {\n      finalKeyResult = keyResult;\n    } else {\n      throw new Error(`node results do not match at first lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n    }\n    log.debug(\"> torus.js/getPublicAddress\", { finalKeyResult, isNewKey });\n\n    if (finalKeyResult) {\n      let { pub_key_X: X, pub_key_Y: Y } = finalKeyResult.keys[0];\n      let nonceResult: GetOrSetNonceResult;\n      let nonce: BN;\n      let modifiedPubKey: curve.base.BasePoint;\n      let typeOfUser: GetOrSetNonceResult[\"typeOfUser\"];\n      let pubNonce: { x: string; y: string } | undefined;\n      if (this.enableOneKey) {\n        try {\n          nonceResult = await this.getOrSetNonce(X, Y, undefined, !isNewKey);\n          nonce = new BN(nonceResult.nonce || \"0\", 16);\n          typeOfUser = nonceResult.typeOfUser;\n        } catch {\n          throw new GetOrSetNonceError();\n        }\n        if (nonceResult.typeOfUser === \"v1\") {\n          modifiedPubKey = this.ec\n            .keyFromPublic({ x: X, y: Y })\n            .getPublic()\n            .add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic());\n        } else if (nonceResult.typeOfUser === \"v2\") {\n          if (nonceResult.upgraded) {\n            // OneKey is upgraded to 2/n, returned address is address of Torus key (postbox key), not tKey\n            modifiedPubKey = this.ec.keyFromPublic({ x: X, y: Y }).getPublic();\n          } else {\n            modifiedPubKey = this.ec\n              .keyFromPublic({ x: X, y: Y })\n              .getPublic()\n              .add(this.ec.keyFromPublic({ x: nonceResult.pubNonce.x, y: nonceResult.pubNonce.y }).getPublic());\n            pubNonce = nonceResult.pubNonce;\n          }\n        } else {\n          throw new Error(\"getOrSetNonce should always return typeOfUser.\");\n        }\n      } else {\n        typeOfUser = \"v1\";\n        nonce = await this.getMetadata({ pub_key_X: X, pub_key_Y: Y });\n        modifiedPubKey = this.ec\n          .keyFromPublic({ x: X, y: Y })\n          .getPublic()\n          .add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic());\n      }\n\n      X = modifiedPubKey.getX().toString(16);\n      Y = modifiedPubKey.getY().toString(16);\n\n      const address = this.generateAddressFromPubKey(modifiedPubKey.getX(), modifiedPubKey.getY());\n      log.debug(\"> torus.js/getPublicAddress\", { X, Y, address, typeOfUser, nonce: nonce?.toString(16), pubNonce });\n\n      if (!isExtended) return address;\n      return {\n        typeOfUser,\n        address,\n        X,\n        Y,\n        metadataNonce: nonce,\n        pubNonce,\n      };\n    }\n    throw new Error(`node results do not match at final lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n  }\n\n  /**\n   * Internal functions for OneKey (OpenLogin v2), only call these functions if you know what you're doing\n   */\n\n  async getOrSetNonce(X: string, Y: string, privKey?: BN, getOnly = false): Promise<GetOrSetNonceResult> {\n    let data: Data;\n    const msg = getOnly ? \"getNonce\" : \"getOrSetNonce\";\n    if (privKey) {\n      data = this.generateMetadataParams(msg, privKey);\n    } else {\n      data = {\n        pub_key_X: X,\n        pub_key_Y: Y,\n        set_data: { data: msg },\n      };\n    }\n    return post<GetOrSetNonceResult>(`${this.metadataHost}/get_or_set_nonce`, data, undefined, { useAPIKey: true });\n  }\n\n  async getNonce(X: string, Y: string, privKey?: BN): Promise<GetOrSetNonceResult> {\n    return this.getOrSetNonce(X, Y, privKey, true);\n  }\n\n  getPostboxKeyFrom1OutOf1(privKey: string, nonce: string): string {\n    const privKeyBN = new BN(privKey, 16);\n    const nonceBN = new BN(nonce, 16);\n    return privKeyBN.sub(nonceBN).umod(this.ec.curve.n).toString(\"hex\");\n  }\n}\n\nexport default Torus;\n","export * from \"./interfaces\";\nexport { default } from \"./torus\";\nexport * from \"./utils\";\n"],"names":["loglevel","log","getLogger","disableAll","capitalizeFirstLetter","str","charAt","toUpperCase","slice","SomeError","errors","responses","predicate","Error","Some","promises","Promise","resolve","reject","finishedCount","sharedState","resolved","errorArr","Array","length","fill","undefined","resultArr","predicateError","forEach","x","index","then","resp","catch","error","finally","data","Object","values","reduce","acc","z","id","startsWith","msg","map","it","join","message","generateJsonRPCObject","post","JsonStringify","createKeccakHash","GetOrSetNonceError","kCombinations","s","k","set","from","_","i","cur","combs","tailCombs","j","push","thresholdSame","arr","t","hashMap","keyLookup","endpoints","verifier","verifierId","lookupPromises","verifier_id","toString","err","lookupResults","lookupShares","filter","x1","errorResult","x2","keyResult","x3","result","JSON","stringify","waitKeyLookup","timeout","setTimeout","keyAssign","torusNodePubs","lastPoint","firstPoint","signerHost","network","nodeNum","Math","floor","random","initialPoint","headers","pubKeyX","X","pubKeyY","Y","useAPIKey","signedData","acceptedErrorMsgs","includes","keccak256","a","hash","update","digest","decrypt","generatePrivate","getPublic","get","setAPIKey","setEmbedHost","BN","ec","EC","toChecksumAddress","Torus","enableOneKey","metadataHost","allowHost","serverTimeOffset","doesKeyAssign","isNewKey","assignResult","finalKeyResult","keys","pub_key_X","pub_key_Y","getOrSetNonce","nonceResult","nonce","typeOfUser","modifiedPubKey","keyFromPublic","y","add","keyFromPrivate","pubNonce","finalX","getX","finalY","getY","address","generateAddressFromPubKey","upgraded","privKeyHex","metadataNonce","torusKeyHex","customKeyHex","torusKey","privKey","sub","umod","curve","n","customKey","newMetadataNonce","generateMetadataParams","setMetadata","indexes","verifierParams","idToken","extraParams","promiseArr","tmpKey","pubKey","tokenCommitment","p","messageprefix","tokencommitment","temppubx","temppuby","verifieridentifier","completedRequests","promiseArrRequest","nodeSigs","encrypted","item","idtoken","nodesignatures","shareResponses","thresholdPublicKey","PublicKey","sharePromises","nodeIndexes","currentShareResponse","sort","b","Index","cmp","firstKey","Metadata","metadata","ephemPublicKey","Buffer","iv","mac","ciphertext","Share","padStart","debug","all","sharesResolved","decryptedShares","curr","value","allCombis","privateKey","currentCombi","currentCombiShares","v","shares","indices","derivedPrivateKey","lagrangeInterpolation","decryptedPubKey","decryptedPubKeyX","decryptedPubKeyY","returnedKey","getNonce","getMetadata","ethAddress","generateAddressFromPrivKey","options","metadataResponse","key","setData","timestamp","Date","now","sig","sign","set_data","signature","r","nodeIndex","secret","upper","lower","mul","neg","temp","delta","invm","publicKey","encode","info","ethAddressLower","publicKeyX","publicKeyY","isExtended","getOnly","privKeyBN","nonceBN","enableAll","apiKey","embedHost","default"],"sourceRoot":""}